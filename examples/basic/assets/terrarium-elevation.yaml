sources:
    nextzen:
        type: MVT
        url: https://tile.nextzen.org/tilezen/vector/v1/256/all/{z}/{x}/{y}.mvt
        url_params:
            api_key: UJcQwnnfQnWcPtKe2aYaEw
        max_zoom: 8
        rasters: [normals, elevation]
    elevation:
        type: Raster
        url: https://tile.nextzen.org/tilezen/terrain/v1/256/terrarium/{z}/{x}/{y}.png
        url_params:
            api_key: UJcQwnnfQnWcPtKe2aYaEw
        max_zoom: 15

textures:
    hypsometric:
        url: ../img/gradient.png
        # filtering: nearest
    decoder:
        url: ../img/decoder.png


styles:
    combo:
        base: raster
        shaders:
            uniforms:
                u_scale: 2
                u_palette: hypsometric
            blocks:
                global: |
                    float unpack(vec4 h) {
                        // GPU reads each 0-255 channel as range 0-1, right where we want it
                        // assemble to get un-normalized height
                        return (h.r * 1. + h.g / 256. + h.b / 65536.);
                    }
                color: |
                    // elevation from elevation tiles
                    float height1 = unpack(color);
                    // normalize to 0 - 1
                    height1 = (height1 - 0.3321533203125)/(0.635833740234375 - 0.3321533203125);

                    // height from elevation tiles
                    color.rgb = vec3(height1);

                    //// exaggerate
                    // color.rgb = color.rgb * u_scale - (u_scale - 1.);

                    // hypsometric gradient from texture
                    color.rgb = texture2D(u_palette, vec2(color.r,0.5)).rgb;

layers:
    terrain:
        data: { source: elevation, layer: _default }
        draw:
            combo:
                order: 0
    water:
        data: { source: nextzen}
        draw:
            polygons:
                order: 4
                color: lightblue
